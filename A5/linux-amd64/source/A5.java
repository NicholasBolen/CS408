/* autogenerated by Processing revision 1286 on 2022-11-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class A5 extends PApplet {

// CS408 - Assignment 5
// Nicholas Bolen
// #200455709

Gas[][][] grid;
Gas[][] cur, old;

// Creative Feature - controls for gas percent, velocity scale, and velocity max
int gasP = 50, vScale = 100, vMax = 3;

// Init
 public void setup()
{
    frameCount = 0;    // Creative Feature - reset frameCount when restarting simulation
    /* size commented out by preprocessor */;
    frameRate(30);

    // Initialize gas with values
    grid = new Gas[2][height][width];
    for (int i = 0; i < height; i++)
        for (int j = 0; j < width; j++)
            grid[0][i][j] = new Gas(vMax, gasP/1000.0f);    // Creative Feature - pass set gas percentage & velocity max to gas generation
}

// Draw on each frame
 public void draw()
{
    // Black background
    background(0);
    // Determine old/new grids
    old = grid[(frameCount + 1) % 2];
    cur = grid[frameCount % 2];

    displayGrid();

    // Initialize new grid to 0
    for (int i = 0; i < height; i++)
        for (int j = 0; j < width; j++)
            cur[i][j] = new Gas(0, 0);

    // Update position
    for (int i = 0; i < height; i++)
        for (int j = 0; j < width; j++)
            updateCell(j, i);
}

// Display gas
 public void displayGrid() {
    // Display gas
    loadPixels();
    for (int i = 0; i < height; i++)
        for (int j = 0; j < width; j++) {
            pixels[i*width + j] = color(old[i][j].density, pow(old[i][j].density, 2) * 0.05f, pow(old[i][j].density, 3) * 0.0001f);
        }
    updatePixels();
}

// Find cells to be updated and call update
 public void updateCell(int x, int y) {
    // Find newx and newy
    float newx = x + old[y][x].velocity.x * (vScale/100.0f);    // Creative Feature - apply velocity scale when finding position
    float newy = y + old[y][x].velocity.y * (vScale/100.0f);    // Creative Feature - apply velocity scale when finding position
    while (newy >= height) newy -= height;
    while (newy < 0.0f) newy += height;
    while (newx >= width) newx -= width;
    while (newx < 0.0f) newx += width;

    // Locate all destination cells
    int intx = (int) newx;
    int inty = (int) newy;
    float fractionx = newx - intx;
    float fractiony = newy - inty;

    // Update from inflow
    updateFromInflow(
        intx,
        inty,
        (1.0f - fractionx) * (1.0f - fractiony) * old[y][x].density,
        old[y][x].velocity);
    updateFromInflow(
        intx,
        inty + 1,
        (1.0f - fractionx) * fractiony          * old[y][x].density,
        old[y][x].velocity);
    updateFromInflow(
        intx + 1,
        inty,
        fractionx          * (1.0f - fractiony) * old[y][x].density,
        old[y][x].velocity);
    updateFromInflow(
        intx + 1,
        inty + 1,
        fractionx          * fractiony           * old[y][x].density,
        old[y][x].velocity);
}

// Update cells (velocity & density)
 public void updateFromInflow(int x, int y, float m2, PVector v2) {
    // Wrap-around
    while (y >= height) y -= height;
    while (y < 0.0f) y += height;
    while (x >= width) x -= width;
    while (x < 0.0f) x += width;

    // Save current cell conditions
    float m1 = cur[y][x].density;
    PVector v1 = cur[y][x].velocity;

    // Avoid dividing by 0
    if (m1 + m2 == 0) {
        cur[y][x].density = 0;
        cur[y][x].velocity = new PVector(0, 0);
    } else {
        cur[y][x].density = m1 + m2;
        cur[y][x].velocity = new PVector((m1 * v1.x + m2*v2.x) / (m1 + m2), (m1 * v1.y + m2*v2.y) / (m1 + m2));
    }
}

// Creative Feature - detect keypresses for controls
 public void keyPressed() {
    // Creative Feature - Reset
    if (key == '0')
        setup();

    // Creative Feature - Gas percent scale
    if (key == 'r' && gasP > 0) {
        gasP -= 5;
        println("Gas percent:", gasP/1000.0f);
    } else if (key == 'R' && gasP < 1000) {
        gasP += 5;
        println("Gas percent:", gasP/1000.0f);
    }

    // Creative Feature - Velocity scale
    if (key == 'v') {
        vScale -= 5;
        println("Velocity scale:", vScale/100.0f);
    } else if (key == 'V') {
        vScale += 5;
        println("Velocity scale:", vScale/100.0f);
    }
    
    // Creative Feature - Velocity max
    if (key == '-' && vMax > 0) {
        vMax--;
        println("Velocity Max:", vMax);
    } else if (key == '+') {
        vMax++;
        println("Velocity Max:", vMax);
    }
}
// The Gas class

class Gas {
    // Params
    float density;
    PVector velocity;

    // Default constructor
    Gas(int a, float gasP) {
        float x = 0, y = 0;
        float f = 1;

        if (a != 0) {
            x = random(-1*a, a);    // Creative Feature - use gas max
            y = random(-1*a, a);    // Creative Feature - use gas max
            f = random(1);
        }

        velocity = new PVector(x, y);
        density = 0;
        if (f <= gasP)    // Creative Feature - gas threshold set by gasP
            density = random(1) * 100;
    }
};


    public void settings() { size(810, 810); }

    static public void main(String[] passedArgs) {
        String[] appletArgs = new String[] { "A5" };
        if (passedArgs != null) {
            PApplet.main(concat(appletArgs, passedArgs));
        } else {
            PApplet.main(appletArgs);
        }
    }
}
